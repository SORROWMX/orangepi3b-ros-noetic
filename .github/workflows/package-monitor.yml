name: Package Monitor & README Update

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 6:00 UTC
    - cron: '0 6 * * *'
  workflow_dispatch:

jobs:
  analyze-packages:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Analyze .deb packages
      id: analyze
      run: |
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        DEB_COUNT=$(ls -1 *.deb 2>/dev/null | wc -l)
        echo "deb_count=$DEB_COUNT" >> $GITHUB_OUTPUT
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã
        TOTAL_SIZE=$(du -sh . | cut -f1)
        echo "total_size=$TOTAL_SIZE" >> $GITHUB_OUTPUT
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã
        LARGEST_FILES=$(ls -lah *.deb | sort -k5 -hr | head -5 | awk '{print $9 " (" $5 ")"}')
        echo "largest_files<<EOF" >> $GITHUB_OUTPUT
        echo "$LARGEST_FILES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
        ARCHITECTURE=$(file *.deb | head -1 | grep -o 'arm64\|amd64\|i386' | head -1)
        echo "architecture=$ARCHITECTURE" >> $GITHUB_OUTPUT

    - name: Generate README
      run: |
        python3 generate_readme.py

    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain README.md)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

    - name: Commit and push changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git commit -m "ü§ñ Auto-update README

        üì¶ Package count: ${{ steps.analyze.outputs.deb_count }}
        üìè Repository size: ${{ steps.analyze.outputs.total_size }}
        üèóÔ∏è Architecture: ${{ steps.analyze.outputs.architecture }}
        ‚è∞ Updated: $(date)"
        git push

    - name: Create detailed summary
      run: |
        echo "## üìä Package Analysis Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì¶ Package Statistics" >> $GITHUB_STEP_SUMMARY
        echo "- **Total .deb files:** ${{ steps.analyze.outputs.deb_count }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository size:** ${{ steps.analyze.outputs.total_size }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Architecture:** ${{ steps.analyze.outputs.architecture }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### üìà Largest Files" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.analyze.outputs.largest_files }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.verify-changed-files.outputs.changed }}" == "true" ]; then
          echo "### ‚úÖ Actions Taken" >> $GITHUB_STEP_SUMMARY
          echo "- README.md was updated" >> $GITHUB_STEP_SUMMARY
          echo "- Changes were committed and pushed" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚ÑπÔ∏è Status" >> $GITHUB_STEP_SUMMARY
          echo "- No changes needed in README.md" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Create package list artifact
      if: always()
      run: |
        mkdir -p artifacts
        ls -la *.deb > artifacts/package_list.txt
        echo "Generated on: $(date)" >> artifacts/package_list.txt
        echo "Total packages: ${{ steps.analyze.outputs.deb_count }}" >> artifacts/package_list.txt

    - name: Upload package list
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: package-list-${{ github.run_number }}
        path: artifacts/package_list.txt

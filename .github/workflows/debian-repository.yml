name: 📦 Debian Repository Generator

on:
  push:
    branches: [ main, master ]
    paths:
      - '*.deb'
      - 'debian/**'
  workflow_dispatch:
  schedule:
    # Обновляем репозиторий каждый день в 7:00 UTC
    - cron: '0 7 * * *'

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  generate-repository:
    runs-on: ubuntu-latest
    environment: github-pages
    env:
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install required tools
      run: |
        sudo apt-get update
        sudo apt-get install -y dpkg-dev apt-utils gnupg2 bc

    - name: Import GPG key
      if: env.GPG_PRIVATE_KEY != ''
      uses: crazy-max/ghaction-import-gpg@v6
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.GPG_PASSPHRASE }}
        git_commit_gpgsign: true

    - name: Configure GPG key ID
      if: env.GPG_PRIVATE_KEY != ''
      run: |
        # Настраиваем GPG key ID для подписи
        echo "default-key ${{ secrets.GPG_KEY_ID }}" >> ~/.gnupg/gpg.conf
        echo "🔐 GPG key configured: ${{ secrets.GPG_KEY_ID }}"

    - name: Create repository structure
      run: |
        # Создаем структуру директорий
        mkdir -p debian/pool/main/arm64
        mkdir -p debian/dists/bookworm/main/binary-arm64
        
        echo "📁 Repository structure created"

    - name: Generate Packages file
      run: |
        cd debian
        # Генерируем Packages файл для ARM64
        dpkg-scanpackages -m pool/main/arm64 /dev/null | gzip -9c > dists/bookworm/main/binary-arm64/Packages.gz
        dpkg-scanpackages -m pool/main/arm64 /dev/null > dists/bookworm/main/binary-arm64/Packages
        
        echo "📦 Packages file generated"

    - name: Generate packages.json for web interface
      run: |
        cd debian
        
        # Создаем packages.json для веб-интерфейса
        echo "📋 Generating packages.json for web interface..."
        
        # Получаем список .deb файлов
        DEB_FILES=$(find pool/main/arm64 -name "*.deb" | sort)
        
        # Создаем JSON структуру
        echo "{" > packages.json
        echo "  \"packages\": [" >> packages.json
        
        # Добавляем информацию о каждом пакете
        first=true
        for deb_file in $DEB_FILES; do
          if [ "$first" = true ]; then
            first=false
          else
            echo "," >> packages.json
          fi
          
          filename=$(basename "$deb_file")
          size=$(stat -c%s "$deb_file" 2>/dev/null || echo "0")
          size_mb=$(awk -v s="$size" 'BEGIN { printf "%.2f", s/1024/1024 }')
          
          # Определяем категорию пакета
          category="other"
          if [[ "$filename" =~ ros-core|ros-base|ros-comm|ros_ ]]; then
            category="core"
          elif [[ "$filename" =~ roscpp|rospy|rosgraph|rosmaster ]]; then
            category="communication"
          elif [[ "$filename" =~ msgs ]] && [[ ! "$filename" =~ dbgsym ]]; then
            category="messages"
          elif [[ "$filename" =~ tf ]] && [[ ! "$filename" =~ dbgsym ]]; then
            category="tf"
          elif [[ "$filename" =~ image|camera|opencv ]]; then
            category="image"
          elif [[ "$filename" =~ rosbag|roslaunch|roswtf ]]; then
            category="utilities"
          elif [[ "$filename" =~ dbgsym ]]; then
            category="debug"
          fi
          
          # Создаем описание пакета
          description=""
          if [[ "$filename" =~ ros-core ]]; then
            description="Core ROS functionality"
          elif [[ "$filename" =~ ros-base ]]; then
            description="Base ROS installation"
          elif [[ "$filename" =~ ros-comm ]]; then
            description="ROS communication libraries"
          elif [[ "$filename" =~ roscpp ]]; then
            description="C++ client library for ROS"
          elif [[ "$filename" =~ rospy ]]; then
            description="Python client library for ROS"
          elif [[ "$filename" =~ tf ]]; then
            description="Transform library for ROS"
          elif [[ "$filename" =~ msgs ]]; then
            description="Message definitions for ROS"
          elif [[ "$filename" =~ dbgsym ]]; then
            description="Debug symbols"
          fi
          
          echo "    {" >> packages.json
          echo "      \"name\": \"$filename\"," >> packages.json
          echo "      \"size\": \"${size_mb} MB\"," >> packages.json
          echo "      \"size_bytes\": $size," >> packages.json
          echo "      \"category\": \"$category\"," >> packages.json
          echo "      \"description\": \"$description\"," >> packages.json
          echo "      \"url\": \"$filename\"" >> packages.json
          echo -n "    }" >> packages.json
        done
        
        echo "" >> packages.json
        echo "  ]," >> packages.json
        echo "  \"total_count\": $(echo "$DEB_FILES" | wc -l)," >> packages.json
        echo "  \"generated_at\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"," >> packages.json
        echo "  \"repository_url\": \"https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/debian/\"" >> packages.json
        echo "}" >> packages.json
        
        echo "✅ packages.json generated with $(echo "$DEB_FILES" | wc -l) packages"

    - name: Generate Release file
      run: |
        cd debian/dists/bookworm
        
        # Создаем Release файл
        cat > Release << EOF
        Origin: Orange Pi 3B ROS Noetic Repository
        Label: Orange Pi 3B ROS Noetic
        Suite: bookworm
        Version: 12
        Codename: bookworm
        Date: $(date -R)
        Architectures: arm64
        Components: main
        Description: Pre-compiled ROS Noetic packages for Orange Pi 3B (ARM64)
        EOF
        
        # Добавляем MD5 суммы
        echo "MD5Sum:" >> Release
        find . -type f -name "Packages*" -exec md5sum {} \; | sed 's/^/ /' >> Release
        
        # Добавляем SHA256 суммы
        echo "SHA256:" >> Release
        find . -type f -name "Packages*" -exec sha256sum {} \; | sed 's/^/ /' >> Release
        
        echo "📋 Release file generated"

    - name: Sign Release file (if GPG available)
      if: env.GPG_PRIVATE_KEY != ''
      run: |
        cd debian/dists/bookworm
        
        # Подписываем Release файл
        gpg --batch --yes --clearsign Release
        
        # Создаем InRelease файл (переименовываем Release.asc в InRelease)
        mv Release.asc InRelease
        
        # Создаем Release.gpg файл
        gpg --batch --yes --detach-sign --armor Release
        
        echo "🔐 Release file signed with GPG key: ${{ secrets.GPG_KEY_ID }}"

    - name: Count packages
      id: count
      run: |
        PACKAGE_COUNT=$(find debian/pool/main/arm64 -name "*.deb" | wc -l)
        echo "package_count=$PACKAGE_COUNT" >> $GITHUB_OUTPUT
        echo "📊 Found $PACKAGE_COUNT packages"

    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain debian/)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

    - name: Commit and push changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add all changes
        git add debian/
        
        # Commit changes
        git commit -m "🤖 Auto-update Debian repository

        📦 Package count: ${{ steps.count.outputs.package_count }}
        🏗️ Architecture: ARM64
        📅 Updated: $(date '+%Y-%m-%d %H:%M:%S')
        🔄 Generated by: GitHub Actions"
        
        # Rebase onto latest remote to avoid non-fast-forward rejections
        BRANCH=$(git branch --show-current || echo "main")
        echo "🔄 Rebase on latest origin/$BRANCH before push"
        git pull --rebase origin "$BRANCH" || true
        
        # Push changes
        git push origin HEAD:"$BRANCH"

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '.'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Create summary
      run: |
        echo "## 🏗️ Debian Repository Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Repository Statistics" >> $GITHUB_STEP_SUMMARY
        echo "- **Total packages:** ${{ steps.count.outputs.package_count }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Architecture:** ARM64" >> $GITHUB_STEP_SUMMARY
        echo "- **Distribution:** Debian Bookworm" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.verify-changed-files.outputs.changed }}" == "true" ]; then
          echo "### ✅ Actions Taken" >> $GITHUB_STEP_SUMMARY
          echo "- Repository metadata updated" >> $GITHUB_STEP_SUMMARY
          echo "- Packages file regenerated" >> $GITHUB_STEP_SUMMARY
          echo "- Release file updated" >> $GITHUB_STEP_SUMMARY
          echo "- Changes committed and pushed" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub Pages deployed" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ℹ️ Status" >> $GITHUB_STEP_SUMMARY
          echo "- No changes needed in repository" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Repository URL" >> $GITHUB_STEP_SUMMARY
        echo "Your Debian repository will be available at:" >> $GITHUB_STEP_SUMMARY
        echo "\`https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/\`" >> $GITHUB_STEP_SUMMARY
